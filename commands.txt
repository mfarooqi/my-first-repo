commands.txt
------------

process  or called pattern
 modified file -> staging -> committed -> remote repo
    ^                                         |
    |-----------------git checkout------------v


to check latest status 
>>git status 


to add new/modified files to track chnages
>>git add filenaame.ext


to revert any file from updating (unstage)
>>git restore --stage test.txt   


to commit any file
>>git commit -m "adding new files for testing" 
 --- here m stands for message that will appear with changes or purpose




to push files to the server
>> git push 
better
>> git push -u origin feature/lesson  #(for brnach)




----to create a new branch 

>> git branch feature/lesson 
------then to switch to that branch
>> git switch feature/lesson



----to both together 
>> git checkout -B feature/lesson


to make a local new repo and link that with server
>> mkdir second-repo
>> git init
>> git remote -v  // check what remote connection are this active with
---link it with the remove repo if there is one.
>> git remote add origin http://github.com/mfarooqi/first-repo.git
>> git remote -v //check updated links 
>> git pull // pull everuything
--- here nothing will be pulled yet because branch is not specified

>> get checkout main //specify main branch
>> ls //now you see the complete list

>> git status
>> vi testfile.txt // changing a file
>> git status
>> git commit -m "message of modification"  testfile.txt
>> get push

-----------all files are up on the first repo ..







for new version


1. Create a New Version (v1.1)

>>git tag -a v1.1 -m "Version 1.1: Updated layout & improvements"
>>git push origin v1.1

2. How to See All Versions?
>>git tag


3. How to Create Future Versions?
 For v1.2, v2.0, etc., just repeat:

>>git tag -a v1.2 -m "Version 1.2: Added animations"
>>git push origin v1.2



4. How to Revert to an Old Version?
git checkout v1.1


---------------------------------


Tomorrow’s Steps for Updating & Tagging v1.1:
1️⃣ Make your updates (modify your portfolio files).
2️⃣ Add & commit changes:
>>git add .
>>git commit -m "Updated portfolio layout and content"


3️⃣ Push changes to GitHub:
>>git push origin main


4️⃣ Tag the new version (v1.1):
>>git tag -a v1.1 -m "Version 1.1: Updated portfolio layout and content"
>>git push origin v1.1


✅ Now your repo has version 1.1 marked! You can continue making more updates and tag future versions the same way.

Let me know if you need any clarifications! 🚀🔥


----------------------------